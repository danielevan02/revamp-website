// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  phone          String?
  image          String?
  hashedPassword String?
  role           String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[]
  Order    Order[]
}

model Order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  status      String?
  total_price Int
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  productIds String[]  @db.ObjectId
  products   Product[] @relation(fields: [productIds], references: [id])
  userId     String    @db.ObjectId
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Slider {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  name      String
  image     String
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  photo     String?
  discount  Int?
  createdAt DateTime @default(now())

  productIds String[]  @db.ObjectId
  products   Product[] @relation(fields: [productIds], references: [id])
}

model Product {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  desc  String?
  photo String
  price Int?
  discount Int?

  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])

  variants Variant[]

  orderIds String[] @db.ObjectId
  order    Order[]  @relation(fields: [orderIds], references: [id])
}

model Variant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  photo     String?
  qty       Int
  price     Int
  createdAt DateTime @default(now())

  productId String?  @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id])
}
